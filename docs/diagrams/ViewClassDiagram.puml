@startuml
class UiManager {
+ start(): void
}
class MainWindow {
+ fillInnerparts(): void
- executeCommand(commandText: String): CommandResult
}
class LogicManager {
- model: Model
+ execute(commandText: String): CommandResult
}
class AddressBookParser {
+ parseCommand(userInput: String): Command
}
class ViewCommandParser {
+ parse(args: String): ViewCommand
}
class ViewCommand {
+ execute(model: Model): CommandResult
}
class CommandResult {
}

class CommandBox {
+ CommandBox(commandExecutor: CommandExecutor)
}
interface Model

UiManager -> MainWindow : creates >
MainWindow -> LogicManager
MainWindow --> CommandBox : creates >
LogicManager --> AddressBookParser : creates >
LogicManager -> Model
AddressBookParser --> ViewCommandParser : creates >
ViewCommand - ViewCommandParser : creates <
CommandResult <- ViewCommand : creates <
LogicManager -- ViewCommand : executes >
CommandBox -- CommandResult : is used to create <



@enduml
